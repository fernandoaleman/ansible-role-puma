# defaults/main.yml
---
# Puma name
puma_name: puma

# System user that will run the Puma process
puma_user: deploy

# Directory where Puma configuration is stored
puma_config_dir: /etc/puma

# File where Puma configuration is stored
puma_config_file: "{{ puma_config_dir }}/puma.rb"

# Root directory of the deployed Rails application
puma_dir: /var/www/html

# The environment in which Puma will run (e.g., development, staging, production)
puma_env: production

# Whether to enable preload_app! in the Puma config for Copy-On-Write memory savings
puma_preload_app_enabled: true

# Number of Puma worker processes.
# Leave blank to have this set automatically based on the number of server CPUs.
puma_workers: "{{ ((ansible_processor_vcpus // 2) | int) if ansible_processor_vcpus > 1 else 1 }}"

# Number of threads per Puma worker.
# Leave blank to have this set automatically based on the number of server CPUs.
puma_threads: "{{ (puma_workers | int) + 1 }}"

# The socket that Puma will bind to for accepting requests
puma_bind: unix://{{ puma_dir }}/puma.sock

# File where Puma will write its PID (process ID)
puma_pidfile: "{{ puma_dir }}/puma.pid"

# File where Puma will store its state (for use with phased restarts, etc.)
puma_state_path: "{{ puma_dir }}/puma.state"

# Whether to enable Puma's control app for phased restarts and monitoring
puma_activate_control_app_enabled: true

# Path to Puma's control socket for pumactl commands
puma_activate_control_app: unix://{{ puma_dir }}/pumactl.sock

# Token used to authenticate requests to the Puma control app
puma_activate_control_app_token: "no_token: true"

# File where Puma will write standard log output
puma_log_file: "{{ puma_dir }}/log/puma.log"

# File where Puma will write error log output
puma_error_log_file: "{{ puma_dir }}/log/puma-error.log"

# Whether to enable `prune_bundler` to clean up unused gem references after a restart
puma_prune_bundler_enabled: true

# Type of the systemd unit.
puma_systemd_unit_type: service

# Default directory for systemd unit files.
puma_systemd_unit_directory: /etc/systemd/system

# Full path for the systemd unit file, constructed using the directory, unit name, and type.
puma_systemd_unit_file: "{{ puma_systemd_unit_directory }}/{{ puma_name }}.{{ puma_systemd_unit_type }}"

# Generic options for systemd units, applied regardless of the unit type.
puma_systemd_unit_generic_options:
  - Description=Puma web server
  - After=network.target

# Path to the Puma executable binary
puma_binary: /usr/local/bin/puma

# Command to start Puma via systemd unit
puma_systemd_unit_exec_start: "{{ puma_binary }} -C {{ puma_config_file }}"

# Path to the pumactl control utility binary
puma_ctl_binary: /usr/local/bin/pumactl

# Command to stop Puma via systemd unit
puma_systemd_unit_exec_stop: "{{ puma_ctl_binary }} -F {{ puma_config_file }} stop"

# Command to reload (restart) Puma via systemd unit
puma_systemd_unit_exec_reload: "{{ puma_ctl_binary }} -F {{ puma_config_file }} phased-restart"

# Restart policy for the Puma systemd unit
puma_systemd_unit_restart: always

# Specific options for the systemd unit, dependent on the unit type and configuration.
puma_systemd_unit_options:
  - Type = simple
  - ExecStart = {{ puma_systemd_unit_exec_start }}
  - ExecStop = {{ puma_systemd_unit_exec_stop }}
  - ExecReload = {{ puma_systemd_unit_exec_reload }}
  - User = {{ puma_user }}
  - Group = {{ puma_user }}
  - WorkingDirectory = {{ puma_dir }}
  - Restart = {{ puma_systemd_unit_restart }}
  - PIDFile = {{ puma_pidfile }}

# Options related to the 'Install' section of a systemd unit file.
puma_systemd_unit_install_options:
  - WantedBy=multi-user.target

  # Name of the systemd service.
puma_systemd_service_name: "{{ puma_name }}"

# Whether or not the systemd service is enabled.
puma_systemd_service_enabled: true

# The systemd service state.
puma_systemd_service_state: started
